shiny::runApp('~/Desktop/Capstone/prediction-app')
runApp('~/Desktop/Capstone/prediction-app')
runApp('~/Desktop/Capstone/prediction-app')
runApp('~/Desktop/Capstone/prediction-app')
runApp('~/Desktop/Capstone/prediction-app')
blank <- data.table(word=unigram$word)
setkey(blank, word)
blank[,prob1 := 0]
blank[,prob2 := 0]
blank[,prob3 := 0]
blank[,prob4 := 0]
source('~/Desktop/Capstone/ngrammer.R')
runApp('~/Desktop/Capstone/prediction-app')
rsconnect::setAccountInfo(name='garethcork', token='1CCD7EDEB7A4C322CA026B7BB13C7AF2', secret='HcOrrZxkmYUpTc+GLYPYY8AxOvikxWIJMtdm0t0l')
runApp('~/Desktop/Capstone/prediction-app')
runApp('~/Desktop/Capstone/prediction-app')
runApp('~/Desktop/Capstone/prediction-app')
runApp('~/Desktop/Capstone/prediction-app')
1 %% 100
100 %% 100
knit_with_parameters('~/Desktop/Next Word Deck/index.Rmd')
publish(user = "chameleonmedia", repo = "next-word-presentation")
library(slidify)
publish(user = "chameleonmedia", repo = "next-word-presentation")
publish(user = "chameleonmedia", repo = "next-word-presentation", host = 'github')
publish(user = "chameleonmedia", repo = "next-word-presentation", host = 'github')
publish(user = "chameleonmedia", repo = "next-word-presentation", host = 'github')
num <- nrow(test.data.prob)
test.data.prob <- load.chunks(10, ngram.set = 4)
test.data.prob$word <- with(unigram, word.id[match(test.data.prob$word, word)])
test.data.prob$history.1 <- with(unigram, word.id[match(test.data.prob$history.1, word)])
test.data.prob$history.2 <- with(unigram, word.id[match(test.data.prob$history.2, word)])
test.data.prob$history.3 <- with(unigram, word.id[match(test.data.prob$history.3, word)])
test.data.prob[, probability := 0]
test.data.prob[, probability.unk := 0]
test.data.prob[is.na(history.1),history.1 := 0]
test.data.prob[is.na(history.2),history.2 := 0]
test.data.prob[is.na(history.3),history.3 := 0]
source('~/Desktop/Capstone/ngrammer.R')
test.data.prob <- load.chunks(10, ngram.set = 4)
test.data.prob$word <- with(unigram, word.id[match(test.data.prob$word, word)])
test.data.prob$history.1 <- with(unigram, word.id[match(test.data.prob$history.1, word)])
test.data.prob$history.2 <- with(unigram, word.id[match(test.data.prob$history.2, word)])
test.data.prob$history.3 <- with(unigram, word.id[match(test.data.prob$history.3, word)])
test.data.prob[, probability := 0]
test.data.prob[, probability.unk := 0]
test.data.prob[is.na(history.1),history.1 := 0]
test.data.prob[is.na(history.2),history.2 := 0]
test.data.prob[is.na(history.3),history.3 := 0]
load("~/Desktop/Capstone/tracking.Rdata")
test.data.prob <- load.chunks(10, ngram.set = 4)
test.data.prob$word <- with(unigram, word.id[match(test.data.prob$word, word)])
test.data.prob$history.1 <- with(unigram, word.id[match(test.data.prob$history.1, word)])
test.data.prob$history.2 <- with(unigram, word.id[match(test.data.prob$history.2, word)])
test.data.prob$history.3 <- with(unigram, word.id[match(test.data.prob$history.3, word)])
test.data.prob[, probability := 0]
test.data.prob[, probability.unk := 0]
test.data.prob[is.na(history.1),history.1 := 0]
test.data.prob[is.na(history.2),history.2 := 0]
test.data.prob[is.na(history.3),history.3 := 0]
setwd("~/Desktop/Capstone")
test.data.prob <- load.chunks(10, ngram.set = 4)
test.data.prob$word <- with(unigram, word.id[match(test.data.prob$word, word)])
test.data.prob$history.1 <- with(unigram, word.id[match(test.data.prob$history.1, word)])
test.data.prob$history.2 <- with(unigram, word.id[match(test.data.prob$history.2, word)])
test.data.prob$history.3 <- with(unigram, word.id[match(test.data.prob$history.3, word)])
test.data.prob[, probability := 0]
test.data.prob[, probability.unk := 0]
test.data.prob[is.na(history.1),history.1 := 0]
test.data.prob[is.na(history.2),history.2 := 0]
test.data.prob[is.na(history.3),history.3 := 0]
num <- nrow(test.data.prob)
source('~/Desktop/Capstone/ngrammer.R')
for(i in 1:nrow(test.data.prob)){
reverse.i<- num-i
if(reverse.i%%1000==0){
print(paste(reverse.i, " of ", nrow(test.data.prob)))
save(test.data.prob, file = paste0("./tempdata/test",reverse.i,".Rdata"))
}
prediction <- predict.next.mkn(test.data.prob[reverse.i,history.1], test.data.prob[reverse.i,history.2], test.data.prob[reverse.i,history.3],quad.dis, tri.dis, bi.dis, quadgram, unigram, trigram.continuation, bigram.continuation, unigram.continuation, blank, test.data.prob[reverse.i,word])
test.data.prob[reverse.i,probability := prediction[1]]
test.data.prob[reverse.i,probability.unk := prediction[2]]
}
load("~/Desktop/Capstone/mkn.pre.Rdata")
for(i in 1:nrow(test.data.prob)){
reverse.i<- num-i
if(reverse.i%%1000==0){
print(paste(reverse.i, " of ", nrow(test.data.prob)))
save(test.data.prob, file = paste0("./tempdata/test",reverse.i,".Rdata"))
}
prediction <- predict.next.mkn(test.data.prob[reverse.i,history.1], test.data.prob[reverse.i,history.2], test.data.prob[reverse.i,history.3],quad.dis, tri.dis, bi.dis, quadgram, unigram, trigram.continuation, bigram.continuation, unigram.continuation, blank, test.data.prob[reverse.i,word])
test.data.prob[reverse.i,probability := prediction[1]]
test.data.prob[reverse.i,probability.unk := prediction[2]]
}
blank <- data.table(word=unigram$word)
setkey(blank, word)
blank[,prob1 := 0]
blank[,prob2 := 0]
blank[,prob3 := 0]
blank[,prob4 := 0]
blank[,word.id := 1:nrow(blank)]
for(i in 1:nrow(test.data.prob)){
reverse.i<- num-i
if(reverse.i%%1000==0){
print(paste(reverse.i, " of ", nrow(test.data.prob)))
save(test.data.prob, file = paste0("./tempdata/test",reverse.i,".Rdata"))
}
prediction <- predict.next.mkn(test.data.prob[reverse.i,history.1], test.data.prob[reverse.i,history.2], test.data.prob[reverse.i,history.3],quad.dis, tri.dis, bi.dis, quadgram, unigram, trigram.continuation, bigram.continuation, unigram.continuation, blank, test.data.prob[reverse.i,word])
test.data.prob[reverse.i,probability := prediction[1]]
test.data.prob[reverse.i,probability.unk := prediction[2]]
}
load("/Users/garethcork/Desktop/test411000.Rdata")
top.test <- test.data.prob[1:410000,]
top.test
load("~/Desktop/Capstone/tempdata/test399000.Rdata")
bottom <- test.data.prob[410001:nrow(test.data.prob),]
top
bottom.test <- test.data.prob[410001:nrow(test.data.prob),]
bottom.test
top.test
full.test.prob <- rbind(top.test, bottom.test)
full.test.prob
save(full.test.prob, "full-test.Rdata"
)
save(full.test.prob, file = "full-test.Rdata")
full.test.prob
test.data.prob <- full.test.prob
test.data.prob[is.na(probability), ]
test.total.words <- sum(test.data.prob$frequency)
test.total.words
oov.words <- test.data.prob[is.na(probability)|probability==0, ]
test.oov.words <- sum(oov.words$frequency)
test.oov.words
predicted.words <- test.data.prob[!is.na(probability)&probability>0, ]
predicted.words
number.of.words <- sum(predicted.words$frequency)
predicted.words <- predicted.words[, combined.prob := log(probability)*frequency]
probability <- sum(predicted.words$combined.prob)
probability
perplexity.calc <- exp((-1/number.of.words)*probability)
perplexity.calc
test.oov.words/test.total.words
test.data.prob[is.na(probability), probability := 1/(sum(unigram.continuation$frequency)+1)]
predicted.words <- test.data.prob[!is.na(probability)&probability>0, ]
oov.words <- test.data.prob[is.na(probability)|probability==0, ]
test.oov.words <- sum(oov.words$frequency)
predicted.words <- test.data.prob[!is.na(probability)&probability>0, ]
number.of.words <- sum(predicted.words$frequency)
predicted.words <- predicted.words[, combined.prob := log(probability)*frequency]
probability <- sum(predicted.words$combined.prob)
perplexity.calc <- exp((-1/number.of.words)*probability)
perplexity.calc
test.data.prob[is.na(probability), probability := 1/(sum(unigram.continuation$frequency)+1)]
test.total.words <- sum(test.data.prob$frequency)
oov.words <- test.data.prob[is.na(probability)|probability==0, ]
test.oov.words <- sum(oov.words$frequency)
predicted.words <- test.data.prob[!is.na(probability)&probability>0, ]
number.of.words <- sum(predicted.words$frequency)
predicted.words <- predicted.words[, combined.prob := log(probability)*frequency]
probability <- sum(predicted.words$combined.prob)
perplexity.calc <- exp((-1/number.of.words)*probability)
perplexity.calc
publish(user = "chameleonmedia", repo = "next-word-presentation", host = 'github')
setwd("~/Desktop/Next Word Deck")
publish(user = "chameleonmedia", repo = "next-word-presentation", host = 'github')
publish(user = "chameleonmedia", repo = "next-word-presentation", host = 'github')
